参考 https://www.liaoxuefeng.com/wiki/896043488029600/896954074659008
git ：https://hub.yzuu.cf/
1.安装git
2.设置user
$ git config --global user.name "Your Name"
$ git config --global user.email "email@example.com"
注意git config命令的--global参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。
3.创建一个版本库
$ mkdir xxxx
$ cd xxxx
$ pwd
4.通过git init命令把这个目录变成Git可以管理的仓库
$ git init
5.把文件添加到版本库
$ git add xxx.xxx
$ git commit -m "xxxxx"
 git add . 添加所有的文件， 或者 git add --all 添加所有的文件 git add -A .
添加指定目录下的文件
config目录下及子目录下所有文件，home目录下的所有.php文件
git config/*
git home/*.php
6.修改文件
运行git status命令看看结果
$ git status
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

	modified:   readme.txt

no changes added to commit (use "git add" and/or "git commit -a")
上面的命令输出告诉我们，readme.txt被修改过了，但还没有准备提交的修改。
$ git diff xxxx.txt 查看修改
$ git add xxx.xxx
$ git commit -m "xxxxx"
7.版本回退
$ git log 查看历史记录 可以加上 --pretty=oneline
$ git reset --hard HEAD^ 回退到上一个版本
用HEAD表示当前版本，上一个版本就是HEAD^，上上一个版本就是HEAD^^
指定回到未来的某个版本：$ git reset --hard 版本号
$ git reflog   用来记录你的每一次命令
8.管理修改
用git diff HEAD -- readme.txt命令可以查看工作区和版本库里面最新版本的区别
git commit 只会提交 git add 的文件，没有被add的文件不会被提交。
9.撤销修改
命令git checkout -- readme.txt意思就是，把readme.txt文件在工作区的修改全部撤销,让这个文件回到最近一次git commit或git add时的状态。
git add 之后 命令git reset HEAD <file>可以把暂存区的修改撤销掉（unstage），重新放回工作区
撤销操作汇总：
情况1：文件只在工作区操作，未add。撤销操作：git restore <file>。结果：工作区文件回退。
情况2：文件已add，未commit。撤销操作：git restore --staged <file>。结果：暂存区文件回退，工作区文件未回退，如需继续回退，操按情况1操作。
情况3：文件已add，已commit。撤销操作：git reset --hard commit_id。结果：工作区文件、暂存区文件、本地仓库都回退
10.删除文件
$ rm test.txt
$ git commit
版本库文件也被删除
$ rm test.txt
$ git checkout -- test.txt
把误删的文件恢复到最新版本
11.远程仓库
第1步：创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：
$ ssh-keygen -t rsa -C "youremail@example.com"
在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥

第2步：登陆GitHub，打开“Account settings”，“SSH Keys”页面：
直接输入cat ~/.ssh/id_rsa.pub即可查看
git remote add origin https://github.com/orangeliufragrant/test.git 添加关联
git remote -v查看远程库信息
git remote rm origin 解除关联
关联后，使用命令git push -u origin master第一次推送master分支的所有内容；
git push origin master推送最新修改
12.从远程库克隆
 git clone 远程仓库地址
13.分支管理
1.创建与合并分支
首先，我们创建dev分支，然后切换到dev分支：
$ git checkout -b dev
git checkout命令加上-b参数表示创建并切换，相当于以下两条命令：
$ git branch dev
$ git checkout dev
然后，用git branch命令查看当前分支：
$ git branch
然后，我们就可以在dev分支上正常提交，比如对readme.txt做个修改，然后提交。
现在，dev分支的工作完成，我们就可以切换回master分支：
$ git checkout master
切换回master分支后，再查看一个readme.txt文件，刚才添加的内容不见了！因为那个提交是在dev分支上，而master分支此刻的提交点并没有变
现在，我们把dev分支的工作成果合并到master分支上：
$ git merge dev
git merge命令用于合并指定分支到当前分支。合并后，再查看readme.txt的内容，就可以看到，和dev分支的最新提交是完全一样的。
合并完成后，就可以放心地删除dev分支了：
$ git branch -d dev
删除后，查看branch，就只剩下master分支了。
$ git branch
创建并切换到新的dev分支，可以使用：
$ git switch -c dev
直接切换到已有的master分支，可以使用：
$ git switch master

查看分支：git branch

创建分支：git branch <name>

切换分支：git checkout <name>或者git switch <name>

创建+切换分支：git checkout -b <name>或者git switch -c <name>

合并某分支到当前分支：git merge <name>

删除分支：git branch -d <name>




